package com.vestrel00.ssc.server.protocols;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.UnknownHostException;

import com.vestrel00.ssc.server.shared.SSCCryptoAES;
import com.vestrel00.ssc.server.shared.SSCStreamManager;
import com.vestrel00.ssc.server.interf.SSCCrypto;
import com.vestrel00.ssc.server.interf.SSCProtocol;
import com.vestrel00.ssc.server.interf.SSCServerService;

/**
 * <p>
 * This is the protocol that the server runs for each client.
 * </p>
 * <ol>
 * <li>Client enters server information.</li>
 * <li>Client performs the handshake protocol with the server or registers with
 * the server if first time.</li>
 * <li>Client chooses messaging protocol.</li>
 * <li>//TODO</li>
 * </ol>
 * 
 * @author Estrellado, Vandolf
 * 
 */
public class SSCServerProtocol implements SSCProtocol {

	/**
	 * Note: streams connections are closed by the service. Not the protocol.
	 */
	private DataInputStream in;
	private DataOutputStream out;
	private byte[] inData;
	private SSCServerService service;
	private SSCCrypto crypt;
	private boolean isWorking;

	/**
	 * Initialize the protocol.
	 */
	public SSCServerProtocol(SSCServerService service, DataInputStream in,
			DataOutputStream out) {
		this.service = service;
		this.in = in;
		this.out = out;
		isWorking = true;
	}

	public SSCServerProtocol(SSCServerService service, DataInputStream in,
			DataOutputStream out, String secretKey, String keyCodeOK)
			throws UnknownHostException, IOException {
		this(service, in, out);
		initCrypto(secretKey, keyCodeOK);
	}

	public void initCrypto(String secretKey, String keyCodeOK) {
		// TODO Auto-generated method stub

	}

	public boolean work() {
		if (isWorking) {
			performMagic();
			return true;
		} else
			return false;
	}

	public void performMagic() {

	}

	public void stopWorking() {
		isWorking = false;
	}

}
