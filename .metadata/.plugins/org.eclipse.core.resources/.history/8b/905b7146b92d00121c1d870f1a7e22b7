package com.vestrel00.ssc.server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import com.vestrel00.ssc.server.interf.SSCServer;
import com.vestrel00.ssc.server.interf.SSCServerService;

/**
 * An implementation of an SSCServer.
 * 
 * @author Estrellado, Vandolf
 * @see SSCServer
 * 
 */
public class SSCServerStandard implements SSCServer {

	private ServerSocket server;
	private List<SSCServerService> clientServices;
	private SSCServerBuffer buffer;
	private boolean isListening;
	private Random rand;

	public SSCServerStandard(int port, int maxClientCount,
			int maxClientBufferSize) throws IOException {
		server = new ServerSocket(port);
		clientServices = new ArrayList<SSCServerService>();
		buffer = new SSCServerBuffer(maxClientCount, maxClientBufferSize);
		isListening = true;
		rand = new Random();
	}

	public void start() {
		while (isListening) {
			try {
				Socket newClient = server.accept();
				clientServices.add(new SSCSServiceStandard(this, newClient, id));
				new Thread(clientServices.get(clientServices.size() - 1)).start();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		stopListening();
	}

	public void stopListening() {
		isListening = false;
		try {
			server.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		for (int i = 0; i < clientServices.size(); i++) {
			clientServices.get(i).stopService();
		}
	}

	public SSCServerBuffer getBuffer() {
		return buffer;
	}

	@Override
	public SSCServerService getServiceById(int destServiceId) {
		for (SSCServerService service : clientServices) {
			if (service.getServiceId() == destServiceId)
				return service;
		}
		return null;
	}

}
