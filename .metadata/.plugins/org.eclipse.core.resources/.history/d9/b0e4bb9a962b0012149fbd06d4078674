package com.vestrel00.ssc;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketAddress;

/**
 * <p>
 * The main server. This runnable forever listens for client socket connection
 * requests on the ServerSocket.
 * </p>
 * <p>
 * When a request comes in, this accepts the connection, creates a new
 * SSCServerService object to process it, hands it the socket returned from
 * accept, and starts the SSCServerService thread. Then the server goes back to
 * listening for connection requests
 * </p>
 * 
 * @author Estrellado, Vandolf
 * 
 */
public class SSCServer implements Runnable {

	private ServerSocket server;
	private boolean isListening;

	/**
	 * Create the server with the given port number.
	 * 
	 * @throws IOException
	 */
	public SSCServer(String host, int port) throws IOException {
		server = new ServerSocket();
		server.bind(new Socket(host, port).getLocalSocketAddress());
		isListening = true;
	}

	/**
	 * Update the server and all its components. <b>This must be called
	 * repeatedly in order to accept more client connection requests!</b>
	 * 
	 * @throws IOException
	 */
	public void run(){
		while (server != null && isListening) {
			try {
				server.accept();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * Server stops listening for client connections requests and closes.
	 * A new SSCServer needs to be created to start the service once more.
	 * @throws IOException 
	 */
	public void stopListening() throws IOException{
		isListening = false;
		server.close();
	}

}
