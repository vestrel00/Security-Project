package com.vestrel00.ssc.client.protocols;

import com.vestrel00.ssc.client.SSCClient;
import com.vestrel00.ssc.client.interf.SSCCrypto;
import com.vestrel00.ssc.client.interf.SSCProtocol;
import com.vestrel00.ssc.client.shared.SSCCryptoAES;

/**
 * <p>
 * This is the protocol that the client program runs.
 * </p>
 * <ol>
 * <li>Client enters server information.</li>
 * <li>Client performs the handshake protocol with the server or registers with
 * the server if first time.</li>
 * <li>Client chooses messaging protocol.</li>
 * <li>//TODO</li>
 * </ol>
 * 
 * @author Estrellado, Vandolf
 * 
 */
public class SSCClientProtocol implements SSCProtocol {

	private SSCClient client;
	private SSCCrypto crypt;
	private boolean isWorking;

	public SSCClientProtocol(SSCClient client) {
		this.client = client;
	}

	/**
	 * Initialize the protocol including the crypto.
	 */
	public SSCClientProtocol(SSCClient client, String secretKey,
			String keyCodeOK) {
		this(client);
		initCrypto(secretKey, keyCodeOK);
	}

	@Override
	public void initCrypto(String secretKey, String keyCodeOK) {
		try {
			crypt = new SSCCryptoAES(secretKey.getBytes(), keyCodeOK);
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean work() {
		if (isWorking) {
			performMagic();
			return true;
		} else
			return false;
	}

	@Override
	public void performMagic() {
		// TODO Auto-generated method stub

	}

	@Override
	public void stopWorking() {
		// TODO Auto-generated method stub

	}

}
