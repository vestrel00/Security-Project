package com.vestrel00.ssc.server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

import com.vestrel00.ssc.server.interf.SSCServer;
import com.vestrel00.ssc.server.interf.SSCServerService;
import com.vestrel00.ssc.server.protocols.SSCProtocol;

/**
 * An implementation of the SSCServerService.
 * 
 * @author Estrellado, Vandolf
 * @see SSCServerService
 * 
 */
public class SSCSServiceStandard implements SSCServerService {

	private SSCProtocol protocol;
	private SSCServer serverClass;
	private Socket client;
	private BufferedReader in;
	private PrintWriter out;
	private boolean inService;

	/**
	 * Create the service.
	 * @param serverClass
	 *            The server which launched this service.
	 * @param client
	 *            The client that will be serviced.
	 * @throws IOException
	 */
	public SSCSServiceStandard(SSCServer serverClass, Socket client)
			throws IOException {
		this.serverClass = serverClass;
		this.client = client;
		inService = true;
		openIO();
		protocol = new SSCProtocol(in, out);
	}

	public void openIO() throws IOException {
		if (out == null) {
			out = new PrintWriter(client.getOutputStream(), true);
			in = new BufferedReader(new InputStreamReader(
					client.getInputStream()));
		} else {
			closeIO();
			openIO();
		}
	}

	public void closeIO() throws IOException {
		out.close();
		in.close();
		out = null;
		in = null;
	}

	public void stopService() throws IOException {
		inService = false;
		closeIO();
		client.close();
	}

	@Override
	public void run() {
		while (inService) {
			if (!protocol.work())
				inService = false;
		}
		try {
			stopService();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
